package seedu.address.report;

import java.io.FileOutputStream;
import java.io.IOException;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import seedu.address.model.entity.body.Body;

//@@author bernicechio
/**
 * Represents a report generator and the ability to be generate a report.
 */
public class ReportGenerator {

    /**
     * Generates a PDF report for all bodies registered in Mortago.
     *
     */
    public static boolean generateAll(java.util.List<Body> bodyList) {
        if (bodyList == null || bodyList.isEmpty()) {
            return false;
        }
        Document document = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(document,
                    new FileOutputStream("Report (ALL BODIES).pdf"));
            addHeader(document, "Mortago Report for All Bodies");
            for (Body body : bodyList) {
                document.add(new Paragraph(String.format("%s", body.getIdNum())));
                document.add(new Paragraph(String.format("%s", body.getName())));
                if (body.getBodyStatus().isEmpty()) {
                    document.add(new Paragraph("No body status"));
                } else {
                    document.add(new Paragraph(String.format("%s", body.getBodyStatus().get())));
                }
            }
            addFooter(document, writer);
        } catch (DocumentException | IOException e) {
            e.printStackTrace();
        }
        return true;
    }

    /**
     * Adds end details to the report.
     *
     * @param document which is the report.
     * @param title which is title of the pdf report.
     */
    private static void addHeader(Document document, String title) throws DocumentException, IOException {
        document.open();
        Font bold = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
        document.add(new Paragraph(title, bold));
        document.add(new Paragraph("\n"));

        Image logo = Image.getInstance("docs/images/Logo.png");
        logo.setAbsolutePosition(450, 700);
        logo.scaleAbsolute(100, 100);
        document.add(logo);
    }

    /**
     * Adds end details to the report.
     *
     * @param document which is the report.
     * @param writer which is used to create the pdf report.
     */
    private static void addFooter(Document document, PdfWriter writer) throws DocumentException {
        document.add(new Paragraph("\n"));
        document.add(new Paragraph("___________________________                _______________"));
        document.add(new Paragraph("Manager Signature                                        Date"));
        document.add(new Paragraph("\n"));
        document.add(new Paragraph("Â©2019 This report is generated by Mortago."));
        document.close();
        writer.close();
    }

    /**
     * Generates a PDF report for the specific body.
     *
     * @param body which is used to generate the report.
     * @return boolean which returns true when report is generated successfully.
     */
    public static boolean generate(Body body) {
        if (body == null) {
            return false;
        }
        Document document = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(document,
                    new FileOutputStream(String.format("Report %s.pdf", body.getIdNum())));
            addHeader(document, String.format("Mortago Report for %s", body.getIdNum()));

            addPersonalDetails(document, body);
            addNokDetails(document, body);
            addOtherDetails(document, body);

            addFooter(document, writer);
        } catch (DocumentException | IOException e) {
            e.printStackTrace();
        }
        return true;
    }

    /**
     * Adds other details of the specific body to the PDF report.
     *
     * @param document which is the report.
     * @param body which is used to generate the report.
     */
    private static void addOtherDetails(Document document, Body body) throws DocumentException {
        document.add(new Paragraph("Other Details:"));
        PdfPTable otherDetails = createTable();

        otherDetails.addCell(new Paragraph("Cause of Death:"));
        if (body.getCauseOfDeath().isEmpty()) {
            otherDetails.addCell(
                    new PdfPCell(new Paragraph("N.A.")));
        } else {
            otherDetails.addCell(
                    new PdfPCell(new Paragraph(String.format("%s", body.getCauseOfDeath().get()))));
        }
        List organList = new List();
        for (String organ : body.getOrgansForDonation()) {
            organList.add(new ListItem(organ));
        }
        if (organList.isEmpty()) {
            organList.add("No organs for donation.");
        }
        PdfPCell cell = new PdfPCell();
        cell.addElement(organList);
        otherDetails.addCell(new Paragraph("Organs for Donation:"));
        otherDetails.addCell(cell);
        otherDetails.addCell(new Paragraph("Body Status:"));
        if (body.getBodyStatus().isEmpty()) {
            otherDetails.addCell(new PdfPCell(new Paragraph("N.A.")));
        } else {
            otherDetails.addCell(
                    new PdfPCell(new Paragraph(String.format("%s", body.getBodyStatus().get()))));
        }
        otherDetails.addCell(new Paragraph("Fridge ID:"));
        if (body.getFridgeId().isEmpty()) {
            otherDetails.addCell(new PdfPCell(new Paragraph("N.A.")));
        } else {
            otherDetails.addCell(
                    new PdfPCell(new Paragraph(String.format("%s", body.getFridgeId().get()))));
        }

        document.add(otherDetails);
    }

    /**
     * Creates a new table for the report PDF.
     *
     * @return table which is an empty table with 2 columns
     */
    private static PdfPTable createTable() throws DocumentException {
        PdfPTable table = new PdfPTable(2);
        table.setWidthPercentage(70);
        table.setSpacingBefore(10f);
        table.setSpacingAfter(10f);
        float[] columnWidths = {0.5f, 0.5f};
        table.setWidths(columnWidths);
        table.setHorizontalAlignment(Element.ALIGN_LEFT);
        return table;
    }

    /**
     * Adds next of kin details of the specific body to the PDF report.
     *
     * @param document which is the report.
     * @param body which is used to generate the report.
     */
    private static void addNokDetails(Document document, Body body) throws DocumentException {
        document.add(new Paragraph("Next of Kin:"));
        PdfPTable nokDetails = createTable();

        nokDetails.addCell(new PdfPCell(new Paragraph("Next of Kin:")));
        if (body.getNextOfKin().isEmpty()) {
            nokDetails.addCell(new PdfPCell(new Paragraph("N.A.")));
        } else {
            nokDetails.addCell(
                    new PdfPCell(new Paragraph(String.format("%s", body.getNextOfKin().get()))));
        }
        nokDetails.addCell(new PdfPCell(new Paragraph("Relationship:")));
        if (body.getRelationship().isEmpty()) {
            nokDetails.addCell(new PdfPCell(new Paragraph("N.A.")));
        } else {
            nokDetails.addCell(
                    new PdfPCell(new Paragraph(String.format("%s", body.getRelationship().get()))));
        }
        nokDetails.addCell(new PdfPCell(new Paragraph("Contact Number:")));
        if (body.getKinPhoneNumber().isEmpty()) {
            nokDetails.addCell(new PdfPCell(new Paragraph("N.A.")));
        } else {
            nokDetails.addCell(
                    new PdfPCell(new Paragraph(String.format("%s", body.getKinPhoneNumber().get()))));
        }

        document.add(nokDetails);
    }

    /**
     * Adds personal details of the specific body to the PDF report.
     *
     * @param document which is the report.
     * @param body which is used to generate the report.
     */
    private static void addPersonalDetails(Document document, Body body) throws DocumentException {
        document.add(new Paragraph("Personal Details:"));
        PdfPTable personalDetails = createTable();

        personalDetails.addCell(new PdfPCell(new Paragraph("ID Number:")));
        personalDetails.addCell(new PdfPCell(new Paragraph(body.getIdNum().toString())));
        personalDetails.addCell(new PdfPCell(new Paragraph("Name:")));
        personalDetails.addCell(new PdfPCell(new Paragraph(body.getName().toString())));
        personalDetails.addCell(new PdfPCell(new Paragraph("Sex:")));
        personalDetails.addCell(new PdfPCell(new Paragraph(body.getSex().toString())));
        personalDetails.addCell(new PdfPCell(new Paragraph("Date of Admission:")));
        personalDetails.addCell(new PdfPCell(new Paragraph(body.getDateOfAdmission().toString())));
        personalDetails.addCell(new PdfPCell(new Paragraph("Date of Birth:")));
        if (body.getDateOfBirth().isEmpty()) {
            personalDetails.addCell(
                    new PdfPCell(new Paragraph("N.A.")));
        } else {
            personalDetails.addCell(
                    new PdfPCell(new Paragraph(String.format("%s", body.getDateOfBirth().get()))));
        }
        personalDetails.addCell(new PdfPCell(new Paragraph("Date of Death:")));
        personalDetails.addCell(new PdfPCell(new Paragraph(body.getDateOfDeath().toString())));
        personalDetails.addCell(new PdfPCell(new Paragraph("NRIC/FIN Number:")));
        if (body.getNric().isEmpty()) {
            personalDetails.addCell(
                    new PdfPCell(new Paragraph("N.A.")));
        } else {
            personalDetails.addCell(
                    new PdfPCell(new Paragraph(String.format("%s", body.getNric().get()))));
        }
        personalDetails.addCell(new PdfPCell(new Paragraph("Religion:")));
        if (body.getReligion().isEmpty()) {
            personalDetails.addCell(
                    new PdfPCell(new Paragraph("N.A.")));
        } else {
            personalDetails.addCell(
                    new PdfPCell(new Paragraph(String.format("%s", body.getReligion().get()))));
        }

        document.add(personalDetails);

    }

    /**
     * Returns true when an object is an instance of ReportGenerator
     *
     * @param other object
     * @return true when object is an instance of ReportGenerator
     */
    public boolean isSameReportGenerator(Object other) {
        return other instanceof ReportGenerator;
    }
}
